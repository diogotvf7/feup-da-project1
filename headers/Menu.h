#ifndef FEUP_DA_PROJECT_MENU_H
#define FEUP_DA_PROJECT_MENU_H

#include <iostream>
#include <iomanip>
#include <unordered_map>

#include "NetworkManager.h"
#include "Network.h"
#include "Util.h"

class Menu {
    std::string path;
    Network *network;
    std::unordered_map<std::string, Network*> reducedNetworks;
    std::string input;
public:
    /**
     * @brief Constuctor of the Menu class
     * @param network the main network to be used
     */
    Menu(Network *network, const std::string &path);
    /**
     * @brief Runs the menu
     */
    void run();
    /**
     * @brief Displays the main menu
     */
    void mainMenu();
    /**
     * Displays the exercise 2.1. menu
     * "Calculate the maximum number of trains that can simultaneously travel between
two specific stations. Note that your implementation should take any valid source and destination
stations as input;"
     */
    void exercise_2_1();
    /**
     * Displays the exercise 2.2. menu
     * "Determine, from all pairs of stations, which ones (if more than one) require the
most amount of trains when taking full advantage of the existing network capacity;"
     */
    void exercise_2_2();
    /**
     * Displays the exercise 2.3. menu
     * "Indicate where management should assign larger budgets for the purchasing and
maintenance of trains. That is, your implementation should be able to report the top-k municipalities
and districts, regarding their transportation needs;"
     */
    void exercise_2_3();
    /**
     * Displays the exercise 2.4. menu
     * "Report the maximum number of trains that can simultaneously arrive at a given station,
taking into consideration the entire railway grid."
     */
    void exercise_2_4();
    /**
     * Displays the exercise 3.1. menu
     * "Calculate the maximum amount of trains that can simultaneously travel between
two specific stations with minimum cost for the company. Note that your system should also take any
valid source and destination stations as input;"
     */
    void exercise_3_1();
    /**
     * Displays the exercise 3.2. menu
     * "Calculate the maximum number of trains that can simultaneously travel between
two specific stations in a network of reduced connectivity. Reduced connectivity is understood as being
a subgraph (generated by your system) of the original railway network. Note that your system should
also take any valid source and destination stations as input;"
     */
    void exercise_4_1();
    /**
     * Displays the exercise 4.1. menu
     * "Provide a report on the stations that are the most affected by each segment failure,
i.e., the top-k most affected stations for each segment to be considered."
     */
    void exercise_4_2();
    /**
     * @brief Displays the possible options of the reduced networks menu
     */
    void manageReducedNetworks();
    /**
     * @brief Displays the name of all the created reduced networks
     */
    void listReducedNetworks();
    /**
     * @brief Allows a user to create and reduce a network
     * @return true if the user wishes to go to the reduced networks management menu, false otherwise
     */
    bool createReducedNetwork();
    /**
     * @brief Allows a user to delete a previously created reduced network
     * @return true if the user wishes to go to the reduced networks management menu, false otherwise
     */
    bool deleteReducedNetwork();
    /**
     * @brief Allows a user to rename a previously created reduced network
     * @return true if the user wishes to go to the reduced networks management menu, false otherwise
     */
    bool renameReducedNetwork();
    /**
     * @brief Allows a user to see all the reduced networks
     * @return true if the user wishes to go to the reduced networks management menu, false otherwise
     */
    bool seeReducedNetworks();
    /**
     * @brief Allows menu to select a reduced network
     * @return the selected reduced network
     */
    Network *selectReducedNetwork();
    /**
     * @brief Allows a user to edit a previously created reduced network
     * @return true if the user wishes to go to the reduced networks management menu, false otherwise
     */
    bool editReducedNetwork();
    /**
     * @brief Allows a user to select a station from a vector of stations
     * @param stations the vector of stations
     * @param message the message to be displayed
     * @param ignoreStation a station to be ignored (for example if it is the source station)
     * @return the selected station
     */
    Station *listStations(std::vector<Station*> stations, const std::string &message, Station *ignoreStation = nullptr);
};

#endif //FEUP_DA_PROJECT_MENU_H
